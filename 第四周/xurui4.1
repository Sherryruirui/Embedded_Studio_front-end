<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        // 数组操作：
        // 一.添加 法1：通过修改length修改数组长度,然后修改数组索引追加数组元素
        var arr = ['red', 'yellow', 'blue', 'pink'];
        arr.length = 7;
        arr[4] = 'black';
        // 法2：push()在数组的末尾添加一个或多个数组元素。参数直接写数组元素，返回的结果为新数组长度。原数组也变化。
        var arr = [1, 2, 3];
        arr.push(4, 'pig');
        // unshift()在开头添加新元素,其余同push
        arr.unshift('red');

        // 二.筛选数组（如筛选[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中大于等于10的元素）
        // 声明一个新的数组用于存放新数据newArr,遍历原来的旧数组，找出大于等于10的元素，依次追加给新数组newArr。使刚开始的newArr.length就为0，然后数组索引号从零开始依次递增
        var arr = [2, 0, 6, 1, 77, 0, 52, 0, 25, 7];
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] >= 10) {
                newArr.push(arr[i])
            }
        }
        console.log(newArr);
        // 三.删除:法1：(如删除数组中的0)建立一个新数组，将原数组中不是0的数放入新数组
        var arr = [2, 0, 6, 1, 77, 0, 52, 0, 25, 7];
        var newArr = [];
        for (var i = 09; i < arr.length; i++) {
            if (arr[i] != 0) {
                newArr[newArr.length] = arr[i];
            }
        }
        console.log(newwArr);
        // 法2：pop()删除数组最后一个元素，一次只能删除一个，没有餐胡，返回结果为删除的那个元素，原数组变化。
        console.log(arr.pop());// 输出为最后一个元素
        // shift()删除第一个，其余同pop
        // 法3：splice() 删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。会改变原数组。
        // splice(从第几个位置开始，删除几个元素，插入的元素)；
        var myFish = ['angel', 'clown', 'trumpet', 'sturgeon'];
        var removed = myFish.splice(0, 2, 'parrot', 'anemone', 'blue');
        // 四.排序
        // 1.升序：
        var arr1 = [13, 4, 77, 1, 7];
        arr1.sort(function (a, b) {
            return a - b;
        })
        console.log(arr1);
        // 2.降序
        arr1.sort(function (a, b) {
            return b - a;
        })
        console.log(arr1);
        // 五.获取数组元素索引
        // indexOf(数组元素)只返回第一个满足条件的索引号，找不到则返回-1.
        // 同理，lastIndexOf(数组元素)返回最后一个符合条件的
        var arr = ['red', 'green', 'blue', 'pink'];
        console.log(arr.indexOf('blue'));
        // 六。将数组转化为字符串
        // toString()将数组转化为字符串，逗号分隔每一项
        var arr = [1, 2, 3];
        console.log(arr.toString());
        // join('分隔符')
        var arr1 = ['red', 'green', 'blue'];

        console.log(arr1.join());//分隔符为逗号
        console.log(arr1.join('-'));//red-green-blue
        // 七。合并数组：concat() 合并两个或多个数组，不会更改现有数组，而是返回一个新数组。
        var a = ['a', 'b', 'c'];
        var b = [1, 2, 3];
        a.concat(b);
        //合并三个数组
        var num1 = [1, 2, 3],
            num2 = [4, 5, 6],
            num3 = [7, 8, 9];
        var nums = num1.concat(num2, num3);

        // 冒泡排序
        var arr = [5, 4, 3, 2, 1];
        for (var i = 0; i <= arr.length - 1; i++) {
            for (var j = 0; j <= arr.length - i - 1; j++) {
                if (a[j] > a[j + 1]) {
                    var temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        // 插入排序
        function addSort(arr) {
            for (var i = 1; i < arr.length; i++) {
                if (arr[i] < arr[i - 1]) {
                    var temp = arr[i];
                    var j = i - 1;
                    arr[i] = arr[j];
                    while (j >= 0 && arr[j] > temp) {
                        arr[j + 1] = arr[j];
                        j--;
                    }
                    arr[j + 1] = temp;
                }
            }
        }
        var arr = [1, 3, 6, -23, 66, 9, -5];
        addSort(arr);
        console.log(arr);

        // 快速排序
        function quickSort(arr, begin, end) {
            var middle = arr.length / 2;
            var l = begin, r = end;
            var temp = arr[begin];
            while (l < r) {
                while (arr[r] > temp && l < r) {
                    r--;
                }
                arr[r] = arr[l];
                while (arr[l] < temp && l < r) {
                    l++;
                }
                arr[r] = arr[l];
            }
            arr[l] = temp;
            quickSort(arr, begin, l - 1);
            quickSort(arr, l + 1, end);
        }
        var arr = [1, 3, 6, -23, 66, 9, -5];
        quickSort(arr, 0, arr.length - 1);
        console.log(arr);
        // 选择排序
        function selectSort(arr) {
            for (var i = 0; i < arr.length; i++) {
                var min = arr[i];
                var minIndex = i;
                for (var j = i + 1; j < arr.length; j++) {
                    if (min > arr[j]) {
                        min = arr[j];
                        minIndex = j;
                    }
                }
                arr.splice(i, 0, min);
                arr.splice(minIndex + 1, 1);
            }
        }
        selectSort(arr);
        console.log(arr);

        // 数组去重
        // 1.用indexOf
        var arr = [2, 0, 6, 1, 77, 0, 52, 0, 25, 7];
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                newArr[newArr.length] = arr[i];
            }
        }
        console.log(newArr);
        // 2.双层循环
        for (var i = 0; i < arr.length; i++) {
            for (var j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    arr.splice(j, 1);
                    j--;
                }
            }
        }
        console.log(arr);
        // 3.用sort排序
        arr = arr.sort();
        var newArr = [arr[0]];
        for (var i = 1; i < arr.length; i++) {
            if (arr[i] !== arr[i - 1]) {
                arr.push(arr[i]);
            }
        }
        console.log(arr);
    </script>
</body>

</html>
